using System;using System.IO.Compression;using System.Text;namespace Salvini.IoTDB;internal class Export{    public static async Task Run(string[] args)    {        var usage = @"Apache IoTDB 数据导出工具 v1.0.23.306--host=127.0.0.1--port=6667--user=root--pwd=admin#123--database=kylin--zip=true|false--start=2022-11-01--end=2022-11-10 --point=调用示例如上, 去掉'--'将参数写入 export.ini 即可直接执行";        Console.Title = "Apache IoTDB 数据导出工具 v1.0.23.306";        Console.OutputEncoding = Encoding.UTF8;        Console.ForegroundColor = ConsoleColor.Magenta;        Console.WriteLine(usage);        Console.ResetColor();        var startTime = DateTime.Today.AddDays(-1);        var endTime = DateTime.Today;        var host = "10.141.7.177";        var user = "root";        var pwd = "admin#123";        var port = "6667";        var database = "CSQALZ";        var zip = true;        List<string> points = null;        if (File.Exists("export.ini"))        {            var ini = await File.ReadAllLinesAsync("export.ini", Encoding.UTF8);            host = ini.FirstOrDefault(x => x.StartsWith("host="))?[5..] ?? host;            port = ini.FirstOrDefault(x => x.StartsWith("port="))?[5..] ?? port;            user = ini.FirstOrDefault(x => x.StartsWith("user="))?[5..] ?? user;            pwd = ini.FirstOrDefault(x => x.StartsWith("pwd="))?[4..] ?? pwd;            database = ini.FirstOrDefault(x => x.StartsWith("database="))?[9..] ?? database;            zip = bool.Parse(ini.FirstOrDefault(x => x.StartsWith("zip="))?[4..] ?? zip.ToString());            startTime = DateTime.Parse(ini.FirstOrDefault(x => x.StartsWith("start="))?[6..] ?? startTime.ToString("yyyy-MM-dd HH:mm:ss"));            endTime = DateTime.Parse(ini.FirstOrDefault(x => x.StartsWith("end="))?[4..] ?? endTime.ToString("yyyy-MM-dd HH:mm:ss"));            points = ini.FirstOrDefault(x => x.StartsWith("point="))?[6..].Split(',').ToList();        }        host = args.FirstOrDefault(x => x.StartsWith("--host="))?[7..] ?? host;        port = args.FirstOrDefault(x => x.StartsWith("--port="))?[7..] ?? port;        user = args.FirstOrDefault(x => x.StartsWith("--user="))?[7..] ?? user;        pwd = args.FirstOrDefault(x => x.StartsWith("--pwd="))?[6..] ?? pwd;        database = args.FirstOrDefault(x => x.StartsWith("--database="))?[11..] ?? database;        zip = bool.Parse(args.FirstOrDefault(x => x.StartsWith("--zip="))?[6..] ?? zip.ToString());        startTime = DateTime.Parse(args.FirstOrDefault(x => x.StartsWith("--start="))?[8..] ?? startTime.ToString("yyyy-MM-dd HH:mm:ss"));        endTime = DateTime.Parse(args.FirstOrDefault(x => x.StartsWith("--end="))?[6..] ?? endTime.ToString("yyyy-MM-dd HH:mm:ss"));        points = args.FirstOrDefault(x => x.StartsWith("--point="))?[8..].Split(',').ToList() ?? points;        var client = new TimeSeriesClient($"iotdb://{user}:{pwd}@{host}:{port}/admin?database={database}");        await client.DataToCsvAsync(startTime, endTime, points);        await client.PointsToCsvAsync($"csv/{database}.csv");        if (zip)        {            var files = Directory.GetFiles("csv", "*.csv");            var size = files.Select(x => new FileInfo(x).Length / 1024.0 / 1024.0).Sum();            Console.WriteLine($"\x1b[36mCSV files \x1b[32mcount: \x1b[33m{files.Length}, \x1b[32msize: \x1b[33m{(size > 1000 ? $"{size / 1024:f2}GB" : $"{size:f2}MB")}\x1b[0m");            var target = $"iotdb_export_{startTime:yyyy-MM-dd}_{endTime:yyyy-MM-dd}.zip";            if (File.Exists(target)) File.Delete(target);            Console.Write("\x1b[36mCompressing ");            Task.Run(async () => { while (Directory.Exists("csv")) { await Task.Delay(150); Console.Write("\x1b[37m.\x1b[0m"); await Task.Delay(250); }; });            ZipFile.CreateFromDirectory("csv", target, CompressionLevel.SmallestSize, false);            Directory.Delete("csv", true);            await Task.Delay(900);            Console.WriteLine($"{Environment.NewLine}\x1b[36mThe Zip file `\x1b[32m{target}\x1b[0m`");        }    }}